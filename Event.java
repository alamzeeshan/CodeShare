/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.rocana.event;  
@SuppressWarnings("all")
/** A generic event. See the reference guide for event format information. */
@org.apache.avro.specific.AvroGenerated
public class Event extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Event\",\"namespace\":\"com.rocana.event\",\"doc\":\"A generic event. See the reference guide for event format information.\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"A globally unique identifier for this event.\",\"default\":null},{\"name\":\"ts\",\"type\":\"long\",\"doc\":\"Epoch timestamp in millis. Required.\"},{\"name\":\"event_type_id\",\"type\":\"int\",\"doc\":\"ID indicating the type of event. Required.\"},{\"name\":\"source\",\"type\":[{\"type\":\"string\",\"avro.java.string\":\"String\"},\"null\"],\"doc\":\"Deprecated event source. Optional.\",\"default\":\"\"},{\"name\":\"location\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Location from which the event was generated. Required.\",\"default\":\"\"},{\"name\":\"host\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Hostname, IP, or other device identifier from which the event was generated. Required.\",\"default\":\"\"},{\"name\":\"service\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Service or process from which the event was generated. Required.\",\"default\":\"\"},{\"name\":\"body\",\"type\":[\"null\",\"bytes\"],\"doc\":\"Raw event content in bytes. Optional.\",\"default\":null},{\"name\":\"attributes\",\"type\":{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"},\"doc\":\"Event type-specific key/value pairs, usually extracted from the event body. Required.\",\"order\":\"ignore\"}],\"version\":2}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  /** A globally unique identifier for this event. */
  @Deprecated public java.lang.CharSequence id;
  /** Epoch timestamp in millis. Required. */
  @Deprecated public long ts;
  /** ID indicating the type of event. Required. */
  @Deprecated public int event_type_id;
  /** Deprecated event source. Optional. */
  @Deprecated public java.lang.CharSequence source;
  /** Location from which the event was generated. Required. */
  @Deprecated public java.lang.CharSequence location;
  /** Hostname, IP, or other device identifier from which the event was generated. Required. */
  @Deprecated public java.lang.CharSequence host;
  /** Service or process from which the event was generated. Required. */
  @Deprecated public java.lang.CharSequence service;
  /** Raw event content in bytes. Optional. */
  @Deprecated public java.nio.ByteBuffer body;
  /** Event type-specific key/value pairs, usually extracted from the event body. Required. */
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Event() {}

  @Override
public String toString() {
	StringBuilder builder2 = new StringBuilder();
	builder2.append("Event [id=");
	builder2.append(id);
	builder2.append(", ts=");
	builder2.append(ts);
	builder2.append(", event_type_id=");
	builder2.append(event_type_id);
	builder2.append(", source=");
	builder2.append(source);
	builder2.append(", location=");
	builder2.append(location);
	builder2.append(", host=");
	builder2.append(host);
	builder2.append(", service=");
	builder2.append(service);
	builder2.append(", body=");
	builder2.append(body);
	builder2.append(", attributes=");
	builder2.append(attributes);
	builder2.append("]");
	return builder2.toString();
}

/**
   * All-args constructor.
   */
  public Event(java.lang.CharSequence id, java.lang.Long ts, java.lang.Integer event_type_id, java.lang.CharSequence source, java.lang.CharSequence location, java.lang.CharSequence host, java.lang.CharSequence service, java.nio.ByteBuffer body, java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes) {
    this.id = id;
    this.ts = ts;
    this.event_type_id = event_type_id;
    this.source = source;
    this.location = location;
    this.host = host;
    this.service = service;
    this.body = body;
    this.attributes = attributes;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return ts;
    case 2: return event_type_id;
    case 3: return source;
    case 4: return location;
    case 5: return host;
    case 6: return service;
    case 7: return body;
    case 8: return attributes;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = (java.lang.CharSequence)value$; break;
    case 1: ts = (java.lang.Long)value$; break;
    case 2: event_type_id = (java.lang.Integer)value$; break;
    case 3: source = (java.lang.CharSequence)value$; break;
    case 4: location = (java.lang.CharSequence)value$; break;
    case 5: host = (java.lang.CharSequence)value$; break;
    case 6: service = (java.lang.CharSequence)value$; break;
    case 7: body = (java.nio.ByteBuffer)value$; break;
    case 8: attributes = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * A globally unique identifier for this event.   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * A globally unique identifier for this event.   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'ts' field.
   * Epoch timestamp in millis. Required.   */
  public java.lang.Long getTs() {
    return ts;
  }

  /**
   * Sets the value of the 'ts' field.
   * Epoch timestamp in millis. Required.   * @param value the value to set.
   */
  public void setTs(java.lang.Long value) {
    this.ts = value;
  }

  /**
   * Gets the value of the 'event_type_id' field.
   * ID indicating the type of event. Required.   */
  public java.lang.Integer getEventTypeId() {
    return event_type_id;
  }

  /**
   * Sets the value of the 'event_type_id' field.
   * ID indicating the type of event. Required.   * @param value the value to set.
   */
  public void setEventTypeId(java.lang.Integer value) {
    this.event_type_id = value;
  }

  /**
   * Gets the value of the 'source' field.
   * Deprecated event source. Optional.   */
  public java.lang.CharSequence getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * Deprecated event source. Optional.   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'location' field.
   * Location from which the event was generated. Required.   */
  public java.lang.CharSequence getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * Location from which the event was generated. Required.   * @param value the value to set.
   */
  public void setLocation(java.lang.CharSequence value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'host' field.
   * Hostname, IP, or other device identifier from which the event was generated. Required.   */
  public java.lang.CharSequence getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * Hostname, IP, or other device identifier from which the event was generated. Required.   * @param value the value to set.
   */
  public void setHost(java.lang.CharSequence value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'service' field.
   * Service or process from which the event was generated. Required.   */
  public java.lang.CharSequence getService() {
    return service;
  }

  /**
   * Sets the value of the 'service' field.
   * Service or process from which the event was generated. Required.   * @param value the value to set.
   */
  public void setService(java.lang.CharSequence value) {
    this.service = value;
  }

  /**
   * Gets the value of the 'body' field.
   * Raw event content in bytes. Optional.   */
  public java.nio.ByteBuffer getBody() {
    return body;
  }

  /**
   * Sets the value of the 'body' field.
   * Raw event content in bytes. Optional.   * @param value the value to set.
   */
  public void setBody(java.nio.ByteBuffer value) {
    this.body = value;
  }

  /**
   * Gets the value of the 'attributes' field.
   * Event type-specific key/value pairs, usually extracted from the event body. Required.   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAttributes() {
    return attributes;
  }

  /**
   * Sets the value of the 'attributes' field.
   * Event type-specific key/value pairs, usually extracted from the event body. Required.   * @param value the value to set.
   */
  public void setAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.attributes = value;
  }

  /** Creates a new Event RecordBuilder */
  public static com.rocana.event.Event.Builder newBuilder() {
    return new com.rocana.event.Event.Builder();
  }
  
  /** Creates a new Event RecordBuilder by copying an existing Builder */
  public static com.rocana.event.Event.Builder newBuilder(com.rocana.event.Event.Builder other) {
    return new com.rocana.event.Event.Builder(other);
  }
  
  /** Creates a new Event RecordBuilder by copying an existing Event instance */
  public static com.rocana.event.Event.Builder newBuilder(com.rocana.event.Event other) {
    return new com.rocana.event.Event.Builder(other);
  }
  
  /**
   * RecordBuilder for Event instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Event>
    implements org.apache.avro.data.RecordBuilder<Event> {

    private java.lang.CharSequence id;
    private long ts;
    private int event_type_id;
    private java.lang.CharSequence source;
    private java.lang.CharSequence location;
    private java.lang.CharSequence host;
    private java.lang.CharSequence service;
    private java.nio.ByteBuffer body;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> attributes;

    /** Creates a new Builder */
    private Builder() {
      super(com.rocana.event.Event.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(com.rocana.event.Event.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ts)) {
        this.ts = data().deepCopy(fields()[1].schema(), other.ts);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.event_type_id)) {
        this.event_type_id = data().deepCopy(fields()[2].schema(), other.event_type_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.source)) {
        this.source = data().deepCopy(fields()[3].schema(), other.source);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.location)) {
        this.location = data().deepCopy(fields()[4].schema(), other.location);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.host)) {
        this.host = data().deepCopy(fields()[5].schema(), other.host);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.service)) {
        this.service = data().deepCopy(fields()[6].schema(), other.service);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.body)) {
        this.body = data().deepCopy(fields()[7].schema(), other.body);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.attributes)) {
        this.attributes = data().deepCopy(fields()[8].schema(), other.attributes);
        fieldSetFlags()[8] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Event instance */
    private Builder(com.rocana.event.Event other) {
            super(com.rocana.event.Event.SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ts)) {
        this.ts = data().deepCopy(fields()[1].schema(), other.ts);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.event_type_id)) {
        this.event_type_id = data().deepCopy(fields()[2].schema(), other.event_type_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.source)) {
        this.source = data().deepCopy(fields()[3].schema(), other.source);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.location)) {
        this.location = data().deepCopy(fields()[4].schema(), other.location);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.host)) {
        this.host = data().deepCopy(fields()[5].schema(), other.host);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.service)) {
        this.service = data().deepCopy(fields()[6].schema(), other.service);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.body)) {
        this.body = data().deepCopy(fields()[7].schema(), other.body);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.attributes)) {
        this.attributes = data().deepCopy(fields()[8].schema(), other.attributes);
        fieldSetFlags()[8] = true;
      }
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public com.rocana.event.Event.Builder setId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'id' field */
    public com.rocana.event.Event.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'ts' field */
    public java.lang.Long getTs() {
      return ts;
    }
    
    /** Sets the value of the 'ts' field */
    public com.rocana.event.Event.Builder setTs(long value) {
      validate(fields()[1], value);
      this.ts = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'ts' field has been set */
    public boolean hasTs() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'ts' field */
    public com.rocana.event.Event.Builder clearTs() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'event_type_id' field */
    public java.lang.Integer getEventTypeId() {
      return event_type_id;
    }
    
    /** Sets the value of the 'event_type_id' field */
    public com.rocana.event.Event.Builder setEventTypeId(int value) {
      validate(fields()[2], value);
      this.event_type_id = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'event_type_id' field has been set */
    public boolean hasEventTypeId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'event_type_id' field */
    public com.rocana.event.Event.Builder clearEventTypeId() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'source' field */
    public java.lang.CharSequence getSource() {
      return source;
    }
    
    /** Sets the value of the 'source' field */
    public com.rocana.event.Event.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.source = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'source' field has been set */
    public boolean hasSource() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'source' field */
    public com.rocana.event.Event.Builder clearSource() {
      source = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'location' field */
    public java.lang.CharSequence getLocation() {
      return location;
    }
    
    /** Sets the value of the 'location' field */
    public com.rocana.event.Event.Builder setLocation(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.location = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'location' field has been set */
    public boolean hasLocation() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'location' field */
    public com.rocana.event.Event.Builder clearLocation() {
      location = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'host' field */
    public java.lang.CharSequence getHost() {
      return host;
    }
    
    /** Sets the value of the 'host' field */
    public com.rocana.event.Event.Builder setHost(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.host = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'host' field has been set */
    public boolean hasHost() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'host' field */
    public com.rocana.event.Event.Builder clearHost() {
      host = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'service' field */
    public java.lang.CharSequence getService() {
      return service;
    }
    
    /** Sets the value of the 'service' field */
    public com.rocana.event.Event.Builder setService(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.service = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'service' field has been set */
    public boolean hasService() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'service' field */
    public com.rocana.event.Event.Builder clearService() {
      service = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'body' field */
    public java.nio.ByteBuffer getBody() {
      return body;
    }
    
    /** Sets the value of the 'body' field */
    public com.rocana.event.Event.Builder setBody(java.nio.ByteBuffer value) {
      validate(fields()[7], value);
      this.body = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'body' field has been set */
    public boolean hasBody() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'body' field */
    public com.rocana.event.Event.Builder clearBody() {
      body = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'attributes' field */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getAttributes() {
      return attributes;
    }
    
    /** Sets the value of the 'attributes' field */
    public com.rocana.event.Event.Builder setAttributes(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[8], value);
      this.attributes = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'attributes' field has been set */
    public boolean hasAttributes() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'attributes' field */
    public com.rocana.event.Event.Builder clearAttributes() {
      attributes = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    public Event build() {
      try {
        Event record = new Event();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ts = fieldSetFlags()[1] ? this.ts : (java.lang.Long) defaultValue(fields()[1]);
        record.event_type_id = fieldSetFlags()[2] ? this.event_type_id : (java.lang.Integer) defaultValue(fields()[2]);
        record.source = fieldSetFlags()[3] ? this.source : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.location = fieldSetFlags()[4] ? this.location : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.host = fieldSetFlags()[5] ? this.host : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.service = fieldSetFlags()[6] ? this.service : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.body = fieldSetFlags()[7] ? this.body : (java.nio.ByteBuffer) defaultValue(fields()[7]);
        record.attributes = fieldSetFlags()[8] ? this.attributes : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[8]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
